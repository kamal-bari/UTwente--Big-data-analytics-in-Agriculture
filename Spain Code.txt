//==========================================================
// Define Study area
//==========================================================

//Select the study are

var roi = /* color: #0b4a8b */ee.Geometry.Point([-4.278056247279982, 39.9238892184167]),
    maskSpain = ee.FeatureCollection("users/mustafa_kamal_shahadat/castilla_la_mancha");

Map.centerObject(maskSpain,8);
//Map.addLayer(maskSpain, {}, 'Mask Boundaries');


//add Corine land cover
var dataset = ee.Image('COPERNICUS/CORINE/V20/100m/2012');
var landCover = dataset.select('landcover');

// Select the "Non-irrigated arable land" mask and filter the country

function maskStudyArea(image) {
  var mask = landCover
             .updateMask(landCover.eq(211))
             .clip(maskSpain);
  return image.updateMask(mask);
}

var MODIS = ee.ImageCollection('MODIS/006/MOD09Q1')
                  .filter(ee.Filter.date('2010-01-01', '2020-12-31'))
                  .map(maskStudyArea);
                  
var falseColorVis = {
  min: -100.0,
  max: 8000.0,
  bands: ['sur_refl_b02', 'sur_refl_b02', 'sur_refl_b01'],
};

//Map.addLayer(MODIS, falseColorVis, 'False Color');


// This field contains UNIX time in milliseconds.
var timeField = 'system:time_start';


// Use this function to add variables for NDVI, time and a constant
// to MODIS imagery.
var addVariables = function(image) {
  // Compute time in fractional years since the epoch.
  var date = ee.Date(image.get(timeField));
  var years = date.difference(ee.Date('2010-01-01'), 'year');
  // Return the image with the added bands.
  return image
    // Add an NDVI band.
    .addBands(image.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']).rename('NDVI'))
    // Add a time band.
    .addBands(ee.Image(years).rename('t'))
    .float()
    // Add a constant band.
   .addBands(ee.Image.constant(1));
};


//  add variables and filter to the area of interest.
var filteredMODIS = MODIS
  .filterBounds(maskSpain)
  .map(addVariables);

// Plot a time series of NDVI at a single location.
var timeseries = ui.Chart.image.series(filteredMODIS.select('NDVI'), roi)
    .setChartType('ScatterChart')
    .setOptions({
      title: 'MODIS NDVI time series at ROI',
      trendlines: {0: {
        color: 'CC0000'
      }},
      lineWidth: 1,
      pointSize: 3,
    });
print(timeseries);

//TREND ANALYSIS
// List of the independent variable names
var independents = ee.List(['constant', 't']);

// Name of the dependent variable.
var dependent = ee.String('NDVI');

// Compute a linear trend.  This will have two bands: 'residuals' and 
// a 2x1 band called coefficients (columns are for dependent variables).
var trend = filteredMODIS.select(independents.add(dependent))
    .reduce(ee.Reducer.linearRegression(independents.length(), 1));
//Map.addLayer(trend, {}, 'trend array image');


// Flatten the coefficients into a 2-band image
var coefficients = trend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([independents]);
//Map.addLayer(coefficients, {}, 'coefficients array image');


var trend_image = coefficients.select('t');
var im_geo = trend_image.geometry();
print(im_geo)
Map.addLayer(trend_image,  {}, 'trend image');
// Export the image, specifying the CRS, transform, and region.
Export.image.toDrive({
  image: trend_image,
  description: 'trend_image',
  region: maskSpain,
  scale: 250
});


// Compute a de-trended series.
var detrended = filteredMODIS.map(function(image) {
  return image.select(dependent).subtract(
          image.select(independents).multiply(coefficients).reduce('sum'))
          .rename(dependent)
          .copyProperties(image, [timeField]);
});


// Plot the detrended results.
var detrendedChart = ui.Chart.image.series(detrended, roi, null, 30)
    .setOptions({
      title: 'Detrended MODIS time series at ROI',
      lineWidth: 1,
      pointSize: 3,
    });
print(detrendedChart);


//SEASONALITY

// Name of the dependent variable.
var dependent = ee.String('NDVI');

// Use these independent variables in the harmonic regression.
var harmonicIndependents = ee.List(['constant', 't', 'cos', 'sin']);

// Add harmonic terms as new image bands.
var harmonicMODIS = filteredMODIS.map(function(image) {
  var timeRadians = image.select('t').multiply(2 * Math.PI);
  return image
    .addBands(timeRadians.cos().rename('cos'))
    .addBands(timeRadians.sin().rename('sin'));
});

var harmonicTrend = harmonicMODIS
  .select(harmonicIndependents.add(dependent))
  // The output of this reducer is a 4x1 array image.
  .reduce(ee.Reducer.linearRegression({
    numX: harmonicIndependents.length(), 
    numY: 1
  }));
  
  // Turn the array image into a multi-band image of coefficients.
var harmonicTrendCoefficients = harmonicTrend.select('coefficients')
  .arrayProject([0])
  .arrayFlatten([harmonicIndependents]);

// Compute fitted values.
var fittedHarmonic = harmonicMODIS.map(function(image) {
  return image.addBands(
    image.select(harmonicIndependents)
      .multiply(harmonicTrendCoefficients)
      .reduce('sum')
      .rename('fitted'));
});

// Plot the fitted model and the original data at the ROI.
print(ui.Chart.image.series(
fittedHarmonic.select(['fitted','NDVI']), roi, ee.Reducer.mean(), 30)
    .setSeriesNames(['NDVI', 'fitted'])
    .setOptions({
      title: 'Harmonic model: original and fitted values',
      lineWidth: 1,
      pointSize: 3,
}));

// Compute phase and amplitude.
var phase = harmonicTrendCoefficients.select('sin')
    .atan2(harmonicTrendCoefficients.select('cos'))
    // Scale to [0, 1] from radians.
    .unitScale(-Math.PI, Math.PI);
    
//Map.addLayer(phase, {}, 'phase');

var amplitude = harmonicTrendCoefficients.select('sin')
    .hypot(harmonicTrendCoefficients.select('cos'))
    // Add a scale factor for visualization.
    .multiply(5);


Map.addLayer(amplitude, {}, 'amplitude');


var im_geo = amplitude.geometry();
print(im_geo)
//Map.addLayer(amplitude,  {}, 'amplitud');
// Export the image, specifying the CRS, transform, and region.
Export.image.toDrive({
  image: amplitude,
  description: 'amplitude',
  region: maskSpain,
  scale: 250
});


//LAGXX---------
// Autocovariance and autocorrelation ---------------------------------------------
// Function to get a lagged collection.  Images that are within
// lagDays of image are stored in a List in the 'images' property.
var lag = function(leftCollection, rightCollection, lagDays) {
  var filter = ee.Filter.and(
    ee.Filter.maxDifference({
      difference: 1000 * 60 * 60 * 24 * lagDays,
      leftField: timeField, 
      rightField: timeField
    }), 
    ee.Filter.greaterThan({
      leftField: timeField, 
      rightField: timeField
  }));
  
  return ee.Join.saveAll({
    matchesKey: 'images',
    measureKey: 'delta_t',
    ordering: timeField, 
    ascending: false, // Sort reverse chronologically
  }).apply({
    primary: leftCollection, 
    secondary: rightCollection, 
    condition: filter
  });
};

// Lag the Landsat series to get the previous image.
// Note that the results vary when using detrended data
var lagged9 = lag(detrended, detrended, 9);

// Function to merge bands of a lagged collection.  If a collection is
// lagged with itself, the band names will be appended with an '_' and
// suffixed by an index of the order in which they were added.  Because
// the 'images' list is sorted reverse chronologically, band_1 is the t-1
// image when the band names collide.
var merge = function(image) {
  // Function to be passed to iterate.
  var merger = function(current, previous) {
    return ee.Image(previous).addBands(current);
  };
  return ee.ImageCollection.fromImages(image.get('images')).iterate(merger, image);
};

// Merge the bands together.
var merged9 = ee.ImageCollection(lagged9.map(merge));

// Function to compute covariance over time.  This will return 
// a 2x2 array image.  Pixels contains variance-covariance matrices.
var covariance = function(mergedCollection, band, lagBand) {
  return mergedCollection.select([band, lagBand]).map(function(image) {
    return image.toArray();
  }).reduce(ee.Reducer.covariance(), 8);
};

// Compute covariance from the merged series.
var lagBand = dependent.cat('_1');
var covariance9 = ee.Image(covariance(merged9, dependent, lagBand));
// (Note that covariance accentuates agriculture)


// Compute correlation from a 2x2 covariance image.
var correlation = function(vcArrayImage) {
  var covariance = ee.Image(vcArrayImage).arrayGet([0, 1]);
  var sd0 = ee.Image(vcArrayImage).arrayGet([0, 0]).sqrt();
  var sd1 = ee.Image(vcArrayImage).arrayGet([1, 1]).sqrt();
  return covariance.divide(sd0).divide(sd1).rename('correlation');
};

// Correlation
var correlation9 = correlation(covariance9);
// (Not sure what this means)
Map.addLayer(correlation9, {min: -1, max: 1}, 'correlation (lag = 9)');

// Export the image, specifying the CRS, transform, and region.
Export.image.toDrive({
  image: correlation9,
  description: 'correlation9',
  region: maskSpain,
  scale: 250
});


//===========================================================================================
// Create User Interface
//===========================================================================================


var MODIS = ee.ImageCollection('MODIS/006/MOD09Q1')
                  .filter(ee.Filter.date('2005-01-01', '2020-12-31'))
                  .map(maskStudyArea);
          
          
//create the NDVI time series
function addNDVI(image) {
  var ndvi = image.normalizedDifference(['sur_refl_b02', 'sur_refl_b01']).rename('ndvi');
  return image.addBands(ndvi);
}

var NDVI = MODIS.map(addNDVI);
// Create a panel to hold our widgets.
var panel = ui.Panel();
panel.style().set('width', '300px');

// Create an intro panel with labels.
var intro = ui.Panel([
  ui.Label({
    value: 'Time Series Chart Inspector',
    style: {fontSize: '20px', fontWeight: 'bold'}
  }),
  ui.Label('Click a point on the map to inspect.')
]);
panel.add(intro);

// panels to hold lon/lat values
var lon = ui.Label();
var lat = ui.Label();
panel.add(ui.Panel([lon, lat], ui.Panel.Layout.flow('horizontal')));


// Register a callback on the default map to be invoked when the map is clicked
Map.onClick(function(coords) {
  // Update the lon/lat panel with values from the click event.
  lon.setValue('lon:-3.956706149623732' + coords.lon.toFixed(2)),
  lat.setValue('lat:39.62836595166972 ' + coords.lat.toFixed(2));
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  
// Create an NDVI chart.
  var ndviChart = ui.Chart.image.series(NDVI.select('ndvi'), point, ee.Reducer.mean(), 10);
  ndviChart.setOptions({
    title: 'NDVI',
    vAxis: {title: 'NDVI', maxValue: 1, minValue: -1},
    hAxis: {title: 'date', format: 'MM-yy', gridlines: {count: 7}},
  });
  panel.widgets().set(2, ndviChart);

});

Map.style().set('cursor', 'crosshair');

// Add the panel to the ui.root.
ui.root.insert(0, panel);

